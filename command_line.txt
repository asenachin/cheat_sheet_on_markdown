Инструкция по установке для пользователей Windows
 
Windows поставляется с консолью — как и другие операционные системы. Но при этом команды консоли Windows и macOS/Linux отличаются друг от друга. 
В повседневной работе большинство пользователей Git используют консоли с наборами команд, похожие на те, что применяют в macOS и Linux. В нашем курсе вы будете учиться делать то же самое. Для этого нужно установить специальный консольный инструмент для Windows, который называется Git Bash.
Есть несколько способов установки. Мы рекомендуем пакет Git for Windows. Он установит не только Bash, но и сам Git, который всё равно понадобится вам дальше.
Проверьте, что в списке устанавливаемых программ стоит галочка напротив пункта Git Bash Here — это позволит открывать консоль с Git в любой папке.

Первый запуск Git Bash
Запустите программу Git Bash. Сделать это можно двумя способами. Можно ввести название программы в окно поиска на панели задач.

Как не потеряться
В графическом интерфейсе всегда ясно, где именно вы находитесь в файловой системе. Если перед вами рабочий стол, значит, вы в папке «Рабочий стол». Если открыта папка «Документы» — вы в ней.

$ pwd
/c/Users/%USERNAME%
/Users/%USERNAME%

$ cd ~

pwd
cd ~
pwd

Вывести содержимое директории — ls
Файловая система компьютера состоит из папок, или директорий. В них могут находиться другие папки и файлы.

Сменить директорию — cd
Следующая важная команда — cd (от англ. change directory — «сменить директорию»). Вы познакомились с ней в прошлом уроке. Она меняет текущую рабочую директорию на ту, которая указана в качестве параметра: cd имя_папки.

$ pwd
/projects # сейчас мы здесь

$ cd github # переходим в папку github

$ pwd
/projects/github # теперь мы здесь! 

$ cd "Фотографии с дня рождения"

$ pwd
/projects/github # сейчас мы здесь

$ cd .. # переходим на уровень выше

$ pwd
/projects # мы вернулись! 

$ pwd
/projects/github # сейчас мы здесь

$ cd . # переходим в текущую директорию

$ pwd
/projects/github # ничего не поменялось 

$ pwd
/projects # сейчас мы здесь

$ cd github/open-source-project # переходим через несколько директорий

$ pwd
/projects/github/open-source-project # переместились сразу в папку open-source-project внутри github

Дополнительные возможности ls
У многих команд консоли есть дополнительные опции. Например, если вы вызовете ls, то увидите список обычных файлов в директории. Но можно вызвать ls с флагом -a и вывести расширенный список. В нём отобразятся все скрытые файлы, которые начинаются с символа . (например, файлы конфигурации). В том числе два особых файла . и .., которые обозначают текущую и родительскую директории.

$ ls # вывели список файлов
file.txt
photo.png

$ ls -a # вывели список, в котором отображаются скрытые файлы ., .. и .git
.
..
.git
file.txt
photo.png

Задание для самостоятельной работы
Откройте консоль и введите команду pwd.
Создайте в текущей директории текстовый файл test.txt с помощью привычного графического интерфейса (правая кнопка мыши → выпадающее меню).
Снова откройте консоль и введите ls.
Если всё сделано правильно, вы увидите файл test.txt в выводе.


Создание файлов и директорий — touch, mkdir
Чтобы создать файл, нужно ввести в консоль команду touch (англ. «коснуться») с именем файла в качестве параметра: touch %ИМЯ_ФАЙЛА%.

$ touch my-new-file.txt # создали файл my-new-file.txt

$ mkdir new-dir # создали директорию new-dir

$ mkdir -p dir1/dir-inside/dir-deeper-inside
# создали папку dir-deeper-inside в папке dir-inside, которая находится в папке dir1

Копирование файлов — cp
Вы наверняка копировали файлы на своём компьютере через графический интерфейс — диспетчер файлов на Windows или Finder на macOS. Посмотрим, как это делать через консоль.
Для копирования файлов через терминал существует команда cp (от англ. copy — «копировать»). В простом виде cp принимает два параметра: что копируем и куда копируем.

$ cp что_копируем куда_копируем

$ cp index.html src/
# скопировали index.html в папку src

$ cp что_копируем что_копируем что_копируем куда_копируем

$ cp index.html style.css script.js src/
# скопировали три файла (index.html, style.css и script.js) в папку src

$ mkdir first-project   
$ touch first-project/data.txt first-project/table.csv

$ mkdir first-project  
# создали папку

$ touch first-project/data.txt
# создали первый файл

$ touch first-project/table.csv
# создали второй файл

$ cd first-project  
# перешли в директорию

$ cp data.txt ~
# скопировали файл в домашнюю директорию

$ cd ~ # перешли в домашнюю директорию

$ pwd # посмотрели, где мы
/Users/%USER_NAME%

$ ls # файл скопирован, ура!
data.txt
<...>

Перемещение файлов и папок — mv
Копирование создаёт копию файла или папки. Но иногда вместо копии нужно удалить файл в одном месте и создать в другом. Для этого есть команда mv (от англ. move — «переместить»).
Синтаксис команды mv аналогичен синтаксису cp. После имени команды указывают список файлов и папок, которые нужно переместить, а затем — папку, в которую нужно выполнить перемещение.
Создайте папку very-important-files внутри директории first-project. Перейдите в first-project командой cd.
Затем переместите файл table.csv в папку very-important-files и проверьте результат.

$ mv table.csv ./very-important-files
# сначала указываем имя файла, который хотим переместить, потом путь — куда перемещаем 

$ cd very-important-files
$ ls
table.csv 
# перешли в папку very-important-files и проверили, что всё сработало

Чтение файлов — cat
Чтобы прочитать файл, в консоль нужно ввести cat (от англ. concatenate and print — «объединить и распечатать») вместе с именем файла. Команда распечатает то, что содержится в нём.

$ cat myfile.txt # распечатали содержимое файла myfile.txt
file-content-1
file-content-2

Удаление файлов и папок — rm, rmdir, rm -r
Чтобы удалить файл, нужно напечатать команду rm (от англ. remove — «удалить») и передать ей имя файла.

$ rm example.txt # удалили файл example.txt из текущей папки

Удалить папку можно командой rmdir (от англ. remove directory — «удалить директорию»). Не забудьте указать имя папки.

$ rmdir images # команда удалит папку images из текущей директории, 
               # если папка images пуста
               
Это защита от случайного удаления нужных файлов. Если папку всё-таки нужно удалить вместе со всем её содержимым, можно использовать команду rm так.

$ rm -r images # удалили папку images со всем её содержимым из текущей директории

Задание для самостоятельной работы
В уроке о навигации вы создавали файл test.txt. Откройте его в любом текстовом редакторе и введите несколько символов или слов. Затем сохраните файл.
Откройте консоль и распечатайте содержимое файла test.txt командой cat test.txt.
Сделайте несколько вызовов mkdir и touch для создания файлов и папок с любыми названиями. Для проверки результата используйте команду ls.
Удалите все созданные на предыдущем шаге файлы и директории командами rm, rmdir и rm -r.


Выполняйте сразу несколько команд
Команды в терминале необязательно вбивать и выполнять по очереди. Их можно указывать не по одной, а сразу списком. Для этого их нужно разделить двумя амперсандами (&&).

$ mkdir second-project && cd second-project && touch index.html style.css
# создаём папку second-project,
# переходим в папку second-project
# и создаём в ней два файла: index.html и style.css

Используйте автозаполнение
Необязательно заучивать все команды наизусть. Если нужно найти какую-нибудь из них, достаточно вспомнить, с каких букв она начинается. Можно набрать их в командной строке и дважды нажать клавишу Tab. Терминал покажет список всех команд, которые начинаются с этих символов.
Tab автоматически дописывает не только команды, но и пути. Начните печатать имя папки или файла (они должны быть в той же директории) и нажмите Tab. Терминал заполнит имя автоматически.
Если этого не происходит, значит, есть несколько файлов или папок, которые начинаются так же. Нажмите Tab ещё раз, и вы увидите их список. Терминал не знает, как ему дозаполнить такой ввод и что именно выбрать, поэтому показывает все варианты, чтобы вы могли уточнить запрос.
Рассмотрим пример. Перейдём в домашнюю директорию /Users/Username с помощью автозаполнения Tab.

$ cd /Users/ # перешли в папку Users

$ cd U[Tab] # ввели первую букву имени пользователя и нажали Tab
# имя папки Username подставится автоматически

$ pwd # теперь проверим, где мы сейчас находимся 
/Users/Username # мы в папке Username!

Вместо того чтобы печатать полное имя папки — Username, мы набрали только его первую букву — U, нажали клавишу Tab, и консоль допечатала всё за нас.
Есть ещё один способ использовать Tab при навигации в другую директорию. Если ввести cd с названием папки, а затем нажать Tab, в консоль в качестве подсказки выведутся все возможные пути.

$ cd ~/[Tab] # вывели список директорий, чтобы понять, куда переходить
Applications/  Downloads/     Library/       Parallels/     Public/        diagrams/      memes/         python/
Desktop/       Dropbox/       Movies/        Pictures/      bin/           docs/          papers/        tmp/
Documents/     Exercism/      Music/         Postman/       books/         go/            projects/

Если вывод будет слишком большой, консоль спросит, нужно ли показать все возможные варианты.

$ cd ~/[Tab] 
zsh: do you wish to see all 426 possibilities (429 lines)? # точно хотите увидеть все 426 варианта (429 линий)?

Чтобы подтвердить вывод, нужно нажать y, а чтобы отменить автодополнение — n.
Применяйте команды для быстрой навигации
Напомним основные:
pwd — проверить, где мы находимся;
ls — посмотреть список файлов/папок в директории;
cd — перейти в выбранную папку.
С помощью этих команд можно быстро перемещаться между каталогами и изучать их содержимое.

/
Applications/            Network/                 Library/                   
System/                  Volumes/                 Users/

# содержимое корневой директории macOS

Готово! В терминале напечаталось содержимое корневой директории.
В эту директорию тоже можно быстро перемещаться — с помощью команды cd / + Enter (если у вас macOS или Linux).

$ cd / # перемещает в корневую директорию

Чтобы попасть в корневую директорию Windows, нужно перейти на соответствующий диск. Например, cd c:/ + Enter или cd /c + Enter.

$ cd c:/ # переместились в корневую директорию
$ ls
Documents and Settings/     Windows/
Program Files/              Users/
Program Files (x86)/

# содержимое корневой директории Windows

В домашнюю директорию можно попасть так же быстро. Вы уже знаете, как это сделать. Символ «тильда» (~) по умолчанию хранит ссылку на домашнюю директорию. Поэтому, чтобы переместиться в неё, достаточно напечатать ~ и нажать Enter.

$ cd ~
$ pwd 
/Users/Username

$ cd ~/Documents # папка Documents хранится в домашней директории
$ pwd
/Users/Username/Documents

Задание для самостоятельной работы
Откройте консоль и перейдите в домашнюю директорию с помощью cd ~.
Введите cd, нажмите пробел, а затем клавишу Tab. Если консоль сообщит, что вариантов слишком много, нажмите y. Вы должны увидеть все файлы и папки в текущей директории.
Введите несколько первых символов одной из папок (например, Desk), а затем ещё раз нажмите клавишу Tab — автозаполнение превратит Desk в Desktop. Выполните cd клавишей Enter.
Два раза нажмите на клавиатуре стрелку вверх (↑), пока не вернётесь к команде для перехода в домашнюю директорию. Дополните её выводом ls. Должно получиться следующее: cd ~ && ls.
Если всё сделано правильно, то ваш терминал находится в домашней директории, а вы видите её содержимое на экране.


